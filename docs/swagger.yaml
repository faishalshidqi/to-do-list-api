basePath: /
definitions:
  domains.AddTaskResponse:
    properties:
      data:
        $ref: '#/definitions/domains.AddTaskResponseData'
      message:
        type: string
    type: object
  domains.AddTaskResponseData:
    properties:
      id:
        type: string
    type: object
  domains.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  domains.GetTaskByIdResponse:
    properties:
      data:
        $ref: '#/definitions/domains.Task'
      message:
        type: string
    type: object
  domains.GetTaskResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/domains.Task'
        type: array
      message:
        type: string
    type: object
  domains.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/domains.LoginResponseData'
      message:
        type: string
    type: object
  domains.LoginResponseData:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  domains.RefreshAuthnData:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  domains.RefreshAuthnResponse:
    properties:
      data:
        $ref: '#/definitions/domains.RefreshAuthnData'
      message:
        type: string
    type: object
  domains.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  domains.Task:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      isCompleted:
        default: false
        type: boolean
      owner:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    required:
    - description
    - title
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a To-Do List API
  title: To-Do List API
  version: "1.0"
paths:
  /api/auth:
    put:
      consumes:
      - application/json
      description: Generating new access token using a refresh token. Only valid refresh
        token will generate new
      parameters:
      - description: refresh token possessed by the user
        in: body
        name: refreshToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domains.RefreshAuthnResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
      summary: Refresh Authentication
      tags:
      - authentication
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: authenticate user
      parameters:
      - description: email address of the user
        format: email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: password of the user
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domains.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
      summary: Login with Email & Password
      tags:
      - authentication
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: New user must have a unique email address
      parameters:
      - description: email address of the new user, must be unique
        format: email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: password of the new user
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: name of the new user
        in: body
        name: name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domains.SuccessResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
      summary: Register A User
      tags:
      - users
  /api/tasks:
    get:
      consumes:
      - application/json
      description: Fetch Tasks By Owner ID. Only valid users may have tasks
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: page number, acting as offset
        in: query
        name: page
        required: true
        type: string
      - description: page size, acting as limit
        in: query
        name: size
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domains.GetTaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
      summary: Fetch Tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Add A New Task
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: task's title
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: task's description
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: whether the task is completed
        in: body
        name: isCompleted
        required: true
        schema:
          type: boolean
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domains.AddTaskResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
      summary: Add A New Task To DB
      tags:
      - tasks
  /api/tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Tasks By ID. Only valid task may be deleted
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domains.GetTaskByIdResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
      summary: Delete Task
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: Fetch Tasks By ID. Only valid task may get returned
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domains.GetTaskByIdResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
      summary: Fetch Task
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Edit Tasks By ID. Only valid task may be edited
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Title of the task
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: Description of the task
        in: body
        name: description
        required: true
        schema:
          type: string
      - description: whether the task is completed
        in: body
        name: isCompleted
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domains.GetTaskByIdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domains.ErrorResponse'
      summary: Edit Task
      tags:
      - tasks
securityDefinitions:
  "":
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
